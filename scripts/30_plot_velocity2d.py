#%%
"""
# openTCAMV -- 30_plot_velocity2d.py
Plot 2D velocity vectors on the x-y plane with the background of the CTH and B03 fields.

## Data requirement
Input file: NetCDF file generated by `20_finalize_tracking.py`

## Usage
python 30_plot_velocity2d.py ../sample/2017_Lan_ns7_nt1.nc --it=24

## Reference
Tsukada, T., Horinouchi, T., & Tsujino, S. (2024). Wind distribution in the eye of tropical cyclone revealed by a novel atmospheric motion vector derivation. Journal of Geophysical Research: Atmospheres, 129, e2023JD040585. https://doi.org/10.1029/2023JD040585
"""

import os
import argparse

import numpy as np
import xarray as xr
import matplotlib.pyplot as plt


argparser = argparse.ArgumentParser("Plot 2D velocity vectors on the x-y plane with the background of the CTH and B03 fields.")
argparser.add_argument("ifn", help="Directory containing sample data")
argparser.add_argument("--it", type=int, default=24, help="Time index to plot")
argparser.add_argument("--sstep", type=int, default=2, help="Spacing between drawn vectors")
argparser.add_argument("--vector_duration", type=int, default=90, help="Duration of each vector in seconds. If 90, then vector length corresponds to the travel length during 90 sec")
argparser.add_argument("--key_speed", type=int, default=50, help="Speed of the key vector")
argparser.add_argument("-o", "--odir", type=str, help="Output directory. If None, make 'outputs' directory in the same directory of the input file")

sample_dir = f"{os.path.dirname(__file__)}/../sample"
test_args = f"{sample_dir}/2017_Lan_ns7_nt1.nc".split()
try:
    get_ipython().run_line_magic("load_ext", "autoreload")
    get_ipython().run_line_magic("autoreload", "2")
    args = argparser.parse_args(test_args)
except:
    args = argparser.parse_args()

# %%
flows = xr.open_dataset(args.ifn)
flows["v"] = np.hypot(flows.vx, flows.vy)

# %%
it = args.it
sstep = args.sstep
vector_duration = args.vector_duration
key_speed = args.key_speed

fig, ax = plt.subplots(figsize=(4.5,4.5), facecolor="w", dpi=300)
ax.pcolormesh(flows.x, flows.y, flows["B03"][it], cmap="gray", vmin=-10, vmax=120, shading="auto")
ax.contour(flows.x, flows.y, flows["cth"][it], colors="#333333", levels=np.r_[2:18:2], linewidths=0.7, alpha=0.7)

mp = ax.quiver(
    flows.x[::sstep], flows.y[::sstep], flows.vx[it,::sstep,::sstep], flows.vy[it,::sstep,::sstep], flows.v[it,::sstep,::sstep], 
    clim=(0,None), cmap="coolwarm", scale=1000/vector_duration, units="xy",
    width=0.3, headwidth=4, headlength=4, headaxislength=3)
ax.quiverkey(mp, 1.10, 1.04, U=key_speed, label=f"{key_speed} m/s", labelsep=0.08, coordinates="axes", fontproperties={"size":11})

ax.xaxis.set_major_locator(plt.MultipleLocator(10))
ax.xaxis.set_minor_locator(plt.MultipleLocator(5))
ax.yaxis.set_major_locator(plt.MultipleLocator(10))
ax.yaxis.set_minor_locator(plt.MultipleLocator(5))

ax.set(xlabel="x (km)", ylabel="y (km)")
ax.set_title(f"AMVs at {flows.time[it].dt.strftime('%Y-%m-%d %H:%M:%S UTC').item()}\nContour: CTH (every 2 km from 2 km)", loc="left")
ax.set_aspect("equal")

p = ax.get_position()
cax = fig.add_axes([p.x1+0.02, p.y0, 0.025, p.height])
fig.colorbar(mp, cax=cax, pad=0.02, label="Wind speed (m/s)")
plt.show()

if args.odir is None:
    args.odir = os.path.dirname(os.path.abspath(args.ifn))+"/outputs"
    os.makedirs(args.odir, exist_ok=True)
opath = f"{args.odir}/AMVs_it{it}.png"
fig.savefig(opath, dpi=300, bbox_inches="tight", pad_inches=0.1)
print(f"[Saved] see {opath}")
# %%
